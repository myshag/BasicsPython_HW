# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число)
# . В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
#
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
#
#
# 1) Вычитание.
#     Участвуют две клетки. Операцию необходимо выполнять только если
#     разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#
# 2) Умножение.
#
# Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell():
    def __init__(self,nums):
        self.nums=nums

    def __str__(self):
        return f"{self.nums}"

    def make_order(self,rows):
        return '\n'.join(['*'*rows for _ in range(self.nums//rows)]) \
               + '\n' + '*' * (self.nums%rows)

    def __add__(self, other):
        print("Сложение клеток")
        return Cell(self.nums+other.nums)

    def __sub__(self, other):
        print("Вычетание клеток")
        if self.nums<other.nums:
            raise ValueError("Ячеек в первой клетке, меньше чем во второй. Операция невозможна")
        return Cell(self.nums-other.nums)

    def __mul__(self, other):
        print("Умножение клеток")
        return Cell(self.nums * other.nums)

    def __truediv__(self, other):
        print("Деление клеток")
        return Cell(round(self.nums // other.nums))


try:
    cell1 = Cell(15)
    cell2 = Cell(10)
    print("Cell(15):\n", cell1.make_order(6),sep="")
    print("Cell(10):\n", cell2.make_order(6), sep="")


    print("Cell(15) + Cell(10) = ", cell1 + cell2)
    print("Cell(15) - Cell(10) = ", cell1 - cell2)
    print("Cell(15) * Cell(10) = ",cell1 * cell2)
    print("Cell(15) / Cell(10) = ",cell1 / cell2)
    print("Cell(10) - Cell(15) = ",cell2 - cell1)



except ValueError as err:
    print("Ошибка", err)







